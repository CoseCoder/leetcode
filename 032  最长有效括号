class Solution {
public:
	void longestVPR(string &s, int i, int l, int r) {
		if (i == s.length()) {
			return;
		}
		if (s[i] == '(')
			l++;
		else if (s[i] == ')') {
			r++;
		}
		if (l < r)
			longestVPR(s, i + 1, 0, 0);
		else {
			if (s[i] == ')') {
				int x = i;
				s[i] = '0';
				while (s[x] == '0')x--;
				s[x] = '0';
				longestVPR(s, i + 1, l - 1, r - 1);
			}
			else longestVPR(s, i + 1, l, r);
		}

	}
	int longestValidParentheses(string s) {
		longestVPR(s, 0, 0, 0);
		int maxl = 0, temp;
		for (int i = 0; i < s.length(); i++) {
			if (s[i] != '0')
				continue;
			temp = 0;
			while (s[i] == '0') {
				i++;
				temp++;
			}
			maxl = max(maxl, temp);
		}
		return maxl;
	}
};
